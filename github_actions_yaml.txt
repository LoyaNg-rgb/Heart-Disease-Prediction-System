name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Create necessary directories
      run: |
        mkdir -p data models templates static
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Create sample data for testing
      run: |
        python -c "
        import pandas as pd
        import numpy as np
        
        # Create sample heart disease dataset for testing
        np.random.seed(42)
        n_samples = 100
        
        data = {
            'Age': np.random.randint(20, 80, n_samples),
            'Sex': np.random.choice(['M', 'F'], n_samples),
            'ChestPainType': np.random.choice(['TA', 'ATA', 'NAP', 'ASY'], n_samples),
            'RestingBP': np.random.randint(90, 180, n_samples),
            'Cholesterol': np.random.randint(150, 400, n_samples),
            'FastingBS': np.random.choice([0, 1], n_samples),
            'RestingECG': np.random.choice(['Normal', 'ST', 'LVH'], n_samples),
            'MaxHR': np.random.randint(100, 200, n_samples),
            'ExerciseAngina': np.random.choice(['Y', 'N'], n_samples),
            'Oldpeak': np.random.uniform(0, 4, n_samples).round(1),
            'ST_Slope': np.random.choice(['Up', 'Flat', 'Down'], n_samples),
            'HeartDisease': np.random.choice([0, 1], n_samples)
        }
        
        df = pd.DataFrame(data)
        df.to_csv('data/heart.csv', index=False)
        print('Sample dataset created')
        "
    
    - name: Train model for testing
      run: |
        python train_model.py
    
    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/heart-disease-prediction:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/heart-disease-prediction:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: test
        args: --severity-threshold=high

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # This could be Heroku, AWS, GCP, etc.

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # This could be Heroku, AWS, GCP, etc.
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Changes in this Release:
          - Automated release from CI/CD pipeline
          - Commit: ${{ github.sha }}
        draft: false
        prerelease: false